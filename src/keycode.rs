use serde::{Deserialize, Serialize};

/// The keycodes from [`device_query`], but with serde support,
/// and an abstract `PlatformSystem` virtual key that translates to
/// the platform-specific key for system access.
#[derive(Debug, Eq, PartialEq, Hash, Clone, Copy, Serialize, Deserialize)]
#[allow(missing_docs)]
pub enum Keycode {
    Key0,
    Key1,
    Key2,
    Key3,
    Key4,
    Key5,
    Key6,
    Key7,
    Key8,
    Key9,
    A,
    B,
    C,
    D,
    E,
    F,
    G,
    H,
    I,
    J,
    K,
    L,
    M,
    N,
    O,
    P,
    Q,
    R,
    S,
    T,
    U,
    V,
    W,
    X,
    Y,
    Z,
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
    Escape,
    Space,
    LControl,
    RControl,
    LShift,
    RShift,
    LAlt,
    RAlt,
    Meta,
    Enter,
    Up,
    Down,
    Left,
    Right,
    Backspace,
    CapsLock,
    Tab,
    Home,
    End,
    PageUp,
    PageDown,
    Insert,
    Delete,

    // The following keys have not been tested on MacOS!
    // Numpad keys which have not been implemented: NumpadSeparator NumLock
    Numpad0,
    Numpad1,
    Numpad2,
    Numpad3,
    Numpad4,
    Numpad5,
    Numpad6,
    Numpad7,
    Numpad8,
    Numpad9,
    NumpadSubtract,
    NumpadAdd,
    NumpadDivide,
    NumpadMultiply,

    // The following keys names represent the position of the key in a US keyboard,
    // not the sign value. In a different keyboards and OS, the position can vary.
    Grave,
    Minus,
    Equal,
    LeftBracket,
    RightBracket,
    BackSlash,
    Semicolon,
    Apostrophe,
    Comma,
    Dot,
    Slash,

    // Additional keys that have some custom behaviour.
    PlatformSystem,
}
impl From<Keycode> for device_query::Keycode {
    fn from(value: Keycode) -> Self {
        use device_query::Keycode as DQK;

        match value {
            Keycode::Key0 => DQK::Key0,
            Keycode::Key1 => DQK::Key1,
            Keycode::Key2 => DQK::Key2,
            Keycode::Key3 => DQK::Key3,
            Keycode::Key4 => DQK::Key4,
            Keycode::Key5 => DQK::Key5,
            Keycode::Key6 => DQK::Key6,
            Keycode::Key7 => DQK::Key7,
            Keycode::Key8 => DQK::Key8,
            Keycode::Key9 => DQK::Key9,
            Keycode::A => DQK::A,
            Keycode::B => DQK::B,
            Keycode::C => DQK::C,
            Keycode::D => DQK::D,
            Keycode::E => DQK::E,
            Keycode::F => DQK::F,
            Keycode::G => DQK::G,
            Keycode::H => DQK::H,
            Keycode::I => DQK::I,
            Keycode::J => DQK::J,
            Keycode::K => DQK::K,
            Keycode::L => DQK::L,
            Keycode::M => DQK::M,
            Keycode::N => DQK::N,
            Keycode::O => DQK::O,
            Keycode::P => DQK::P,
            Keycode::Q => DQK::Q,
            Keycode::R => DQK::R,
            Keycode::S => DQK::S,
            Keycode::T => DQK::T,
            Keycode::U => DQK::U,
            Keycode::V => DQK::V,
            Keycode::W => DQK::W,
            Keycode::X => DQK::X,
            Keycode::Y => DQK::Y,
            Keycode::Z => DQK::Z,
            Keycode::F1 => DQK::F1,
            Keycode::F2 => DQK::F2,
            Keycode::F3 => DQK::F3,
            Keycode::F4 => DQK::F4,
            Keycode::F5 => DQK::F5,
            Keycode::F6 => DQK::F6,
            Keycode::F7 => DQK::F7,
            Keycode::F8 => DQK::F8,
            Keycode::F9 => DQK::F9,
            Keycode::F10 => DQK::F10,
            Keycode::F11 => DQK::F11,
            Keycode::F12 => DQK::F12,
            Keycode::Escape => DQK::Escape,
            Keycode::Space => DQK::Space,
            Keycode::LControl => DQK::LControl,
            Keycode::RControl => DQK::RControl,
            Keycode::LShift => DQK::LShift,
            Keycode::RShift => DQK::RShift,
            Keycode::LAlt => DQK::LAlt,
            Keycode::RAlt => DQK::RAlt,
            Keycode::Meta => DQK::Meta,
            Keycode::Enter => DQK::Enter,
            Keycode::Up => DQK::Up,
            Keycode::Down => DQK::Down,
            Keycode::Left => DQK::Left,
            Keycode::Right => DQK::Right,
            Keycode::Backspace => DQK::Backspace,
            Keycode::CapsLock => DQK::CapsLock,
            Keycode::Tab => DQK::Tab,
            Keycode::Home => DQK::Home,
            Keycode::End => DQK::End,
            Keycode::PageUp => DQK::PageUp,
            Keycode::PageDown => DQK::PageDown,
            Keycode::Insert => DQK::Insert,
            Keycode::Delete => DQK::Delete,
            Keycode::Numpad0 => DQK::Numpad0,
            Keycode::Numpad1 => DQK::Numpad1,
            Keycode::Numpad2 => DQK::Numpad2,
            Keycode::Numpad3 => DQK::Numpad3,
            Keycode::Numpad4 => DQK::Numpad4,
            Keycode::Numpad5 => DQK::Numpad5,
            Keycode::Numpad6 => DQK::Numpad6,
            Keycode::Numpad7 => DQK::Numpad7,
            Keycode::Numpad8 => DQK::Numpad8,
            Keycode::Numpad9 => DQK::Numpad9,
            Keycode::NumpadSubtract => DQK::NumpadSubtract,
            Keycode::NumpadAdd => DQK::NumpadAdd,
            Keycode::NumpadDivide => DQK::NumpadDivide,
            Keycode::NumpadMultiply => DQK::NumpadMultiply,
            Keycode::Grave => DQK::Grave,
            Keycode::Minus => DQK::Minus,
            Keycode::Equal => DQK::Equal,
            Keycode::LeftBracket => DQK::LeftBracket,
            Keycode::RightBracket => DQK::RightBracket,
            Keycode::BackSlash => DQK::BackSlash,
            Keycode::Semicolon => DQK::Semicolon,
            Keycode::Apostrophe => DQK::Apostrophe,
            Keycode::Comma => DQK::Comma,
            Keycode::Dot => DQK::Dot,
            Keycode::Slash => DQK::Slash,
            Keycode::PlatformSystem => {
                if cfg!(target_os = "macos") {
                    DQK::Meta
                } else {
                    DQK::LControl
                }
            }
        }
    }
}
impl From<device_query::Keycode> for Keycode {
    fn from(value: device_query::Keycode) -> Self {
        use device_query::Keycode as DQK;

        match value {
            DQK::Key0 => Self::Key0,
            DQK::Key1 => Self::Key1,
            DQK::Key2 => Self::Key2,
            DQK::Key3 => Self::Key3,
            DQK::Key4 => Self::Key4,
            DQK::Key5 => Self::Key5,
            DQK::Key6 => Self::Key6,
            DQK::Key7 => Self::Key7,
            DQK::Key8 => Self::Key8,
            DQK::Key9 => Self::Key9,
            DQK::A => Self::A,
            DQK::B => Self::B,
            DQK::C => Self::C,
            DQK::D => Self::D,
            DQK::E => Self::E,
            DQK::F => Self::F,
            DQK::G => Self::G,
            DQK::H => Self::H,
            DQK::I => Self::I,
            DQK::J => Self::J,
            DQK::K => Self::K,
            DQK::L => Self::L,
            DQK::M => Self::M,
            DQK::N => Self::N,
            DQK::O => Self::O,
            DQK::P => Self::P,
            DQK::Q => Self::Q,
            DQK::R => Self::R,
            DQK::S => Self::S,
            DQK::T => Self::T,
            DQK::U => Self::U,
            DQK::V => Self::V,
            DQK::W => Self::W,
            DQK::X => Self::X,
            DQK::Y => Self::Y,
            DQK::Z => Self::Z,
            DQK::F1 => Self::F1,
            DQK::F2 => Self::F2,
            DQK::F3 => Self::F3,
            DQK::F4 => Self::F4,
            DQK::F5 => Self::F5,
            DQK::F6 => Self::F6,
            DQK::F7 => Self::F7,
            DQK::F8 => Self::F8,
            DQK::F9 => Self::F9,
            DQK::F10 => Self::F10,
            DQK::F11 => Self::F11,
            DQK::F12 => Self::F12,
            DQK::Escape => Self::Escape,
            DQK::Space => Self::Space,
            DQK::LControl => Self::LControl,
            DQK::RControl => Self::RControl,
            DQK::LShift => Self::LShift,
            DQK::RShift => Self::RShift,
            DQK::LAlt => Self::LAlt,
            DQK::RAlt => Self::RAlt,
            DQK::Meta => Self::Meta,
            DQK::Enter => Self::Enter,
            DQK::Up => Self::Up,
            DQK::Down => Self::Down,
            DQK::Left => Self::Left,
            DQK::Right => Self::Right,
            DQK::Backspace => Self::Backspace,
            DQK::CapsLock => Self::CapsLock,
            DQK::Tab => Self::Tab,
            DQK::Home => Self::Home,
            DQK::End => Self::End,
            DQK::PageUp => Self::PageUp,
            DQK::PageDown => Self::PageDown,
            DQK::Insert => Self::Insert,
            DQK::Delete => Self::Delete,
            DQK::Numpad0 => Self::Numpad0,
            DQK::Numpad1 => Self::Numpad1,
            DQK::Numpad2 => Self::Numpad2,
            DQK::Numpad3 => Self::Numpad3,
            DQK::Numpad4 => Self::Numpad4,
            DQK::Numpad5 => Self::Numpad5,
            DQK::Numpad6 => Self::Numpad6,
            DQK::Numpad7 => Self::Numpad7,
            DQK::Numpad8 => Self::Numpad8,
            DQK::Numpad9 => Self::Numpad9,
            DQK::NumpadSubtract => Self::NumpadSubtract,
            DQK::NumpadAdd => Self::NumpadAdd,
            DQK::NumpadDivide => Self::NumpadDivide,
            DQK::NumpadMultiply => Self::NumpadMultiply,
            DQK::Grave => Self::Grave,
            DQK::Minus => Self::Minus,
            DQK::Equal => Self::Equal,
            DQK::LeftBracket => Self::LeftBracket,
            DQK::RightBracket => Self::RightBracket,
            DQK::BackSlash => Self::BackSlash,
            DQK::Semicolon => Self::Semicolon,
            DQK::Apostrophe => Self::Apostrophe,
            DQK::Comma => Self::Comma,
            DQK::Dot => Self::Dot,
            DQK::Slash => Self::Slash,
        }
    }
}
